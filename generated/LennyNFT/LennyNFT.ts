// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get approved(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ApprovalForAll extends ethereum.Event {
  get params(): ApprovalForAll__Params {
    return new ApprovalForAll__Params(this);
  }
}

export class ApprovalForAll__Params {
  _event: ApprovalForAll;

  constructor(event: ApprovalForAll) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get operator(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get approved(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class DelegateChanged extends ethereum.Event {
  get params(): DelegateChanged__Params {
    return new DelegateChanged__Params(this);
  }
}

export class DelegateChanged__Params {
  _event: DelegateChanged;

  constructor(event: DelegateChanged) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fromDelegate(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get toDelegate(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class DelegateVotesChanged extends ethereum.Event {
  get params(): DelegateVotesChanged__Params {
    return new DelegateVotesChanged__Params(this);
  }
}

export class DelegateVotesChanged__Params {
  _event: DelegateVotesChanged;

  constructor(event: DelegateVotesChanged) {
    this._event = event;
  }

  get delegate(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get previousBalance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newBalance(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LennyNFT__artistsResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: boolean, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class LennyNFT__collectionsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class LennyNFT__participantsResult {
  value0: boolean;
  value1: boolean;
  value2: boolean;

  constructor(value0: boolean, value1: boolean, value2: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    return map;
  }
}

export class LennyNFT extends ethereum.SmartContract {
  static bind(address: Address): LennyNFT {
    return new LennyNFT("LennyNFT", address);
  }

  DOMAIN_SEPARATOR(): Bytes {
    let result = super.call(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DOMAIN_SEPARATOR(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_SEPARATOR",
      "DOMAIN_SEPARATOR():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  LastCollectionNumber(): BigInt {
    let result = super.call(
      "LastCollectionNumber",
      "LastCollectionNumber():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_LastCollectionNumber(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "LastCollectionNumber",
      "LastCollectionNumber():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _allTokens(param0: BigInt): BigInt {
    let result = super.call("_allTokens", "_allTokens(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBigInt();
  }

  try__allTokens(param0: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("_allTokens", "_allTokens(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  artists(param0: Address): LennyNFT__artistsResult {
    let result = super.call(
      "artists",
      "artists(address):(bool,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new LennyNFT__artistsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_artists(param0: Address): ethereum.CallResult<LennyNFT__artistsResult> {
    let result = super.tryCall(
      "artists",
      "artists(address):(bool,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LennyNFT__artistsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  balanceOf(owner: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  collections(param0: BigInt): LennyNFT__collectionsResult {
    let result = super.call(
      "collections",
      "collections(uint256):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new LennyNFT__collectionsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_collections(
    param0: BigInt
  ): ethereum.CallResult<LennyNFT__collectionsResult> {
    let result = super.tryCall(
      "collections",
      "collections(uint256):(uint256,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LennyNFT__collectionsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  createNFTArtist(
    _tokenURI: string,
    _minimumPrice: BigInt,
    _endAuctionDate: BigInt
  ): BigInt {
    let result = super.call(
      "createNFTArtist",
      "createNFTArtist(string,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromString(_tokenURI),
        ethereum.Value.fromUnsignedBigInt(_minimumPrice),
        ethereum.Value.fromUnsignedBigInt(_endAuctionDate)
      ]
    );

    return result[0].toBigInt();
  }

  try_createNFTArtist(
    _tokenURI: string,
    _minimumPrice: BigInt,
    _endAuctionDate: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createNFTArtist",
      "createNFTArtist(string,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromString(_tokenURI),
        ethereum.Value.fromUnsignedBigInt(_minimumPrice),
        ethereum.Value.fromUnsignedBigInt(_endAuctionDate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createNFTCommunity(
    _tokenURI: string,
    _minimumPrice: BigInt,
    _endAuctionDate: BigInt
  ): BigInt {
    let result = super.call(
      "createNFTCommunity",
      "createNFTCommunity(string,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromString(_tokenURI),
        ethereum.Value.fromUnsignedBigInt(_minimumPrice),
        ethereum.Value.fromUnsignedBigInt(_endAuctionDate)
      ]
    );

    return result[0].toBigInt();
  }

  try_createNFTCommunity(
    _tokenURI: string,
    _minimumPrice: BigInt,
    _endAuctionDate: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createNFTCommunity",
      "createNFTCommunity(string,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromString(_tokenURI),
        ethereum.Value.fromUnsignedBigInt(_minimumPrice),
        ethereum.Value.fromUnsignedBigInt(_endAuctionDate)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createNFTDev(_tokenURI: string): BigInt {
    let result = super.call("createNFTDev", "createNFTDev(string):(uint256)", [
      ethereum.Value.fromString(_tokenURI)
    ]);

    return result[0].toBigInt();
  }

  try_createNFTDev(_tokenURI: string): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "createNFTDev",
      "createNFTDev(string):(uint256)",
      [ethereum.Value.fromString(_tokenURI)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  delegates(account: Address): Address {
    let result = super.call("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toAddress();
  }

  try_delegates(account: Address): ethereum.CallResult<Address> {
    let result = super.tryCall("delegates", "delegates(address):(address)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  doscAdd(): Address {
    let result = super.call("doscAdd", "doscAdd():(address)", []);

    return result[0].toAddress();
  }

  try_doscAdd(): ethereum.CallResult<Address> {
    let result = super.tryCall("doscAdd", "doscAdd():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeToParticipate(): BigInt {
    let result = super.call(
      "feeToParticipate",
      "feeToParticipate():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_feeToParticipate(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "feeToParticipate",
      "feeToParticipate():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getApproved(tokenId: BigInt): Address {
    let result = super.call("getApproved", "getApproved(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_getApproved(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getApproved",
      "getApproved(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getPastTotalSupply(blockNumber: BigInt): BigInt {
    let result = super.call(
      "getPastTotalSupply",
      "getPastTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );

    return result[0].toBigInt();
  }

  try_getPastTotalSupply(blockNumber: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPastTotalSupply",
      "getPastTotalSupply(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(blockNumber)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPastVotes(account: Address, blockNumber: BigInt): BigInt {
    let result = super.call(
      "getPastVotes",
      "getPastVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );

    return result[0].toBigInt();
  }

  try_getPastVotes(
    account: Address,
    blockNumber: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPastVotes",
      "getPastVotes(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromUnsignedBigInt(blockNumber)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVotes(account: Address): BigInt {
    let result = super.call("getVotes", "getVotes(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_getVotes(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("getVotes", "getVotes(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isApprovedForAll(owner: Address, operator: Address): boolean {
    let result = super.call(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );

    return result[0].toBoolean();
  }

  try_isApprovedForAll(
    owner: Address,
    operator: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isApprovedForAll",
      "isApprovedForAll(address,address):(bool)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(operator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastAuthorizedAddress(): Address {
    let result = super.call(
      "lastAuthorizedAddress",
      "lastAuthorizedAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_lastAuthorizedAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "lastAuthorizedAddress",
      "lastAuthorizedAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  lastChangingTime(): BigInt {
    let result = super.call(
      "lastChangingTime",
      "lastChangingTime():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastChangingTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastChangingTime",
      "lastChangingTime():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  marketAdd(): Address {
    let result = super.call("marketAdd", "marketAdd():(address)", []);

    return result[0].toAddress();
  }

  try_marketAdd(): ethereum.CallResult<Address> {
    let result = super.tryCall("marketAdd", "marketAdd():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ownerOf(tokenId: BigInt): Address {
    let result = super.call("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toAddress();
  }

  try_ownerOf(tokenId: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("ownerOf", "ownerOf(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  participants(param0: Address, param1: BigInt): LennyNFT__participantsResult {
    let result = super.call(
      "participants",
      "participants(address,uint256):(bool,bool,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new LennyNFT__participantsResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBoolean()
    );
  }

  try_participants(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<LennyNFT__participantsResult> {
    let result = super.tryCall(
      "participants",
      "participants(address,uint256):(bool,bool,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new LennyNFT__participantsResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBoolean()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  tokenAdd(): Address {
    let result = super.call("tokenAdd", "tokenAdd():(address)", []);

    return result[0].toAddress();
  }

  try_tokenAdd(): ethereum.CallResult<Address> {
    let result = super.tryCall("tokenAdd", "tokenAdd():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  tokenByIndex(index: BigInt): BigInt {
    let result = super.call("tokenByIndex", "tokenByIndex(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toBigInt();
  }

  try_tokenByIndex(index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenByIndex",
      "tokenByIndex(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenOfOwnerByIndex(owner: Address, index: BigInt): BigInt {
    let result = super.call(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toBigInt();
  }

  try_tokenOfOwnerByIndex(
    owner: Address,
    index: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "tokenOfOwnerByIndex",
      "tokenOfOwnerByIndex(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(owner),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  tokenURI(tokenId: BigInt): string {
    let result = super.call("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);

    return result[0].toString();
  }

  try_tokenURI(tokenId: BigInt): ethereum.CallResult<string> {
    let result = super.tryCall("tokenURI", "tokenURI(uint256):(string)", [
      ethereum.Value.fromUnsignedBigInt(tokenId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _doscAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _name_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get _version_(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddArtistCall extends ethereum.Call {
  get inputs(): AddArtistCall__Inputs {
    return new AddArtistCall__Inputs(this);
  }

  get outputs(): AddArtistCall__Outputs {
    return new AddArtistCall__Outputs(this);
  }
}

export class AddArtistCall__Inputs {
  _call: AddArtistCall;

  constructor(call: AddArtistCall) {
    this._call = call;
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nbOfNFTs(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddArtistCall__Outputs {
  _call: AddArtistCall;

  constructor(call: AddArtistCall) {
    this._call = call;
  }
}

export class AddNFTperArtistCall extends ethereum.Call {
  get inputs(): AddNFTperArtistCall__Inputs {
    return new AddNFTperArtistCall__Inputs(this);
  }

  get outputs(): AddNFTperArtistCall__Outputs {
    return new AddNFTperArtistCall__Outputs(this);
  }
}

export class AddNFTperArtistCall__Inputs {
  _call: AddNFTperArtistCall;

  constructor(call: AddNFTperArtistCall) {
    this._call = call;
  }

  get newAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nbOfNFTs(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class AddNFTperArtistCall__Outputs {
  _call: AddNFTperArtistCall;

  constructor(call: AddNFTperArtistCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class ChangeFeeCall extends ethereum.Call {
  get inputs(): ChangeFeeCall__Inputs {
    return new ChangeFeeCall__Inputs(this);
  }

  get outputs(): ChangeFeeCall__Outputs {
    return new ChangeFeeCall__Outputs(this);
  }
}

export class ChangeFeeCall__Inputs {
  _call: ChangeFeeCall;

  constructor(call: ChangeFeeCall) {
    this._call = call;
  }

  get _newfee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ChangeFeeCall__Outputs {
  _call: ChangeFeeCall;

  constructor(call: ChangeFeeCall) {
    this._call = call;
  }
}

export class CreateCommunityCollectionCall extends ethereum.Call {
  get inputs(): CreateCommunityCollectionCall__Inputs {
    return new CreateCommunityCollectionCall__Inputs(this);
  }

  get outputs(): CreateCommunityCollectionCall__Outputs {
    return new CreateCommunityCollectionCall__Outputs(this);
  }
}

export class CreateCommunityCollectionCall__Inputs {
  _call: CreateCommunityCollectionCall;

  constructor(call: CreateCommunityCollectionCall) {
    this._call = call;
  }

  get _endDate(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _nbOfParticipant(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _nbOfSelectedArts(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateCommunityCollectionCall__Outputs {
  _call: CreateCommunityCollectionCall;

  constructor(call: CreateCommunityCollectionCall) {
    this._call = call;
  }
}

export class CreateNFTArtistCall extends ethereum.Call {
  get inputs(): CreateNFTArtistCall__Inputs {
    return new CreateNFTArtistCall__Inputs(this);
  }

  get outputs(): CreateNFTArtistCall__Outputs {
    return new CreateNFTArtistCall__Outputs(this);
  }
}

export class CreateNFTArtistCall__Inputs {
  _call: CreateNFTArtistCall;

  constructor(call: CreateNFTArtistCall) {
    this._call = call;
  }

  get _tokenURI(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _minimumPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _endAuctionDate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateNFTArtistCall__Outputs {
  _call: CreateNFTArtistCall;

  constructor(call: CreateNFTArtistCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateNFTCommunityCall extends ethereum.Call {
  get inputs(): CreateNFTCommunityCall__Inputs {
    return new CreateNFTCommunityCall__Inputs(this);
  }

  get outputs(): CreateNFTCommunityCall__Outputs {
    return new CreateNFTCommunityCall__Outputs(this);
  }
}

export class CreateNFTCommunityCall__Inputs {
  _call: CreateNFTCommunityCall;

  constructor(call: CreateNFTCommunityCall) {
    this._call = call;
  }

  get _tokenURI(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _minimumPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _endAuctionDate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class CreateNFTCommunityCall__Outputs {
  _call: CreateNFTCommunityCall;

  constructor(call: CreateNFTCommunityCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CreateNFTDevCall extends ethereum.Call {
  get inputs(): CreateNFTDevCall__Inputs {
    return new CreateNFTDevCall__Inputs(this);
  }

  get outputs(): CreateNFTDevCall__Outputs {
    return new CreateNFTDevCall__Outputs(this);
  }
}

export class CreateNFTDevCall__Inputs {
  _call: CreateNFTDevCall;

  constructor(call: CreateNFTDevCall) {
    this._call = call;
  }

  get _tokenURI(): string {
    return this._call.inputValues[0].value.toString();
  }
}

export class CreateNFTDevCall__Outputs {
  _call: CreateNFTDevCall;

  constructor(call: CreateNFTDevCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DelegateCall extends ethereum.Call {
  get inputs(): DelegateCall__Inputs {
    return new DelegateCall__Inputs(this);
  }

  get outputs(): DelegateCall__Outputs {
    return new DelegateCall__Outputs(this);
  }
}

export class DelegateCall__Inputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class DelegateCall__Outputs {
  _call: DelegateCall;

  constructor(call: DelegateCall) {
    this._call = call;
  }
}

export class DelegateBySigCall extends ethereum.Call {
  get inputs(): DelegateBySigCall__Inputs {
    return new DelegateBySigCall__Inputs(this);
  }

  get outputs(): DelegateBySigCall__Outputs {
    return new DelegateBySigCall__Outputs(this);
  }
}

export class DelegateBySigCall__Inputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nonce(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get expiry(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[3].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class DelegateBySigCall__Outputs {
  _call: DelegateBySigCall;

  constructor(call: DelegateBySigCall) {
    this._call = call;
  }
}

export class ParticipateToCollectionCall extends ethereum.Call {
  get inputs(): ParticipateToCollectionCall__Inputs {
    return new ParticipateToCollectionCall__Inputs(this);
  }

  get outputs(): ParticipateToCollectionCall__Outputs {
    return new ParticipateToCollectionCall__Outputs(this);
  }
}

export class ParticipateToCollectionCall__Inputs {
  _call: ParticipateToCollectionCall;

  constructor(call: ParticipateToCollectionCall) {
    this._call = call;
  }
}

export class ParticipateToCollectionCall__Outputs {
  _call: ParticipateToCollectionCall;

  constructor(call: ParticipateToCollectionCall) {
    this._call = call;
  }
}

export class RegisterWinnersCall extends ethereum.Call {
  get inputs(): RegisterWinnersCall__Inputs {
    return new RegisterWinnersCall__Inputs(this);
  }

  get outputs(): RegisterWinnersCall__Outputs {
    return new RegisterWinnersCall__Outputs(this);
  }
}

export class RegisterWinnersCall__Inputs {
  _call: RegisterWinnersCall;

  constructor(call: RegisterWinnersCall) {
    this._call = call;
  }

  get winners(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class RegisterWinnersCall__Outputs {
  _call: RegisterWinnersCall;

  constructor(call: RegisterWinnersCall) {
    this._call = call;
  }
}

export class SafeTransferFromCall extends ethereum.Call {
  get inputs(): SafeTransferFromCall__Inputs {
    return new SafeTransferFromCall__Inputs(this);
  }

  get outputs(): SafeTransferFromCall__Outputs {
    return new SafeTransferFromCall__Outputs(this);
  }
}

export class SafeTransferFromCall__Inputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SafeTransferFromCall__Outputs {
  _call: SafeTransferFromCall;

  constructor(call: SafeTransferFromCall) {
    this._call = call;
  }
}

export class SafeTransferFrom1Call extends ethereum.Call {
  get inputs(): SafeTransferFrom1Call__Inputs {
    return new SafeTransferFrom1Call__Inputs(this);
  }

  get outputs(): SafeTransferFrom1Call__Outputs {
    return new SafeTransferFrom1Call__Outputs(this);
  }
}

export class SafeTransferFrom1Call__Inputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _data(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }
}

export class SafeTransferFrom1Call__Outputs {
  _call: SafeTransferFrom1Call;

  constructor(call: SafeTransferFrom1Call) {
    this._call = call;
  }
}

export class SetApprovalForAllCall extends ethereum.Call {
  get inputs(): SetApprovalForAllCall__Inputs {
    return new SetApprovalForAllCall__Inputs(this);
  }

  get outputs(): SetApprovalForAllCall__Outputs {
    return new SetApprovalForAllCall__Outputs(this);
  }
}

export class SetApprovalForAllCall__Inputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }

  get operator(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get approved(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class SetApprovalForAllCall__Outputs {
  _call: SetApprovalForAllCall;

  constructor(call: SetApprovalForAllCall) {
    this._call = call;
  }
}

export class SetContractAddressesCall extends ethereum.Call {
  get inputs(): SetContractAddressesCall__Inputs {
    return new SetContractAddressesCall__Inputs(this);
  }

  get outputs(): SetContractAddressesCall__Outputs {
    return new SetContractAddressesCall__Outputs(this);
  }
}

export class SetContractAddressesCall__Inputs {
  _call: SetContractAddressesCall;

  constructor(call: SetContractAddressesCall) {
    this._call = call;
  }

  get _marketAdd(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _tokenAdd(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class SetContractAddressesCall__Outputs {
  _call: SetContractAddressesCall;

  constructor(call: SetContractAddressesCall) {
    this._call = call;
  }
}

export class SetTokenURICall extends ethereum.Call {
  get inputs(): SetTokenURICall__Inputs {
    return new SetTokenURICall__Inputs(this);
  }

  get outputs(): SetTokenURICall__Outputs {
    return new SetTokenURICall__Outputs(this);
  }
}

export class SetTokenURICall__Inputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _tokenURI(): string {
    return this._call.inputValues[1].value.toString();
  }
}

export class SetTokenURICall__Outputs {
  _call: SetTokenURICall;

  constructor(call: SetTokenURICall) {
    this._call = call;
  }
}

export class StartNewCollectionCall extends ethereum.Call {
  get inputs(): StartNewCollectionCall__Inputs {
    return new StartNewCollectionCall__Inputs(this);
  }

  get outputs(): StartNewCollectionCall__Outputs {
    return new StartNewCollectionCall__Outputs(this);
  }
}

export class StartNewCollectionCall__Inputs {
  _call: StartNewCollectionCall;

  constructor(call: StartNewCollectionCall) {
    this._call = call;
  }
}

export class StartNewCollectionCall__Outputs {
  _call: StartNewCollectionCall;

  constructor(call: StartNewCollectionCall) {
    this._call = call;
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }
}

export class UpdateSCCall extends ethereum.Call {
  get inputs(): UpdateSCCall__Inputs {
    return new UpdateSCCall__Inputs(this);
  }

  get outputs(): UpdateSCCall__Outputs {
    return new UpdateSCCall__Outputs(this);
  }
}

export class UpdateSCCall__Inputs {
  _call: UpdateSCCall;

  constructor(call: UpdateSCCall) {
    this._call = call;
  }
}

export class UpdateSCCall__Outputs {
  _call: UpdateSCCall;

  constructor(call: UpdateSCCall) {
    this._call = call;
  }
}
